
variable "aws_region" {
  type    = string
  default = "us-east-2"
}

variable "eks_version" {
  type    = string
  default = "1.18"
}

variable "http_proxy" {
  type    = string
  default = ""
}

variable "https_proxy" {
  type    = string
  default = ""
}

variable "no_proxy" {
  type    = string
  default = ""
}

variable "root_volume_size" {
  type    = string
  default = "50"
}

variable "source_ami_arch" {
  type    = string
  default = "x86_64"
}

variable "source_ami_owner" {
  type    = string
  default = "801119661308"
}

variable "source_ami_owner_govcloud" {
  type    = string
  default = "077303321853"
}

variable "subnet_id" {
  type    = string
  default = ""
}

variable "vpc_id" {
  type    = string
  default = ""
}

data "amazon-ami" "autogenerated_1" {
  filters = {
    architecture        = "${var.source_ami_arch}"
    name                = "Windows_Server-2019-English-Core-EKS_Optimized-${var.eks_version}-*"
    root-device-type    = "ebs"
    state               = "available"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["${var.source_ami_owner}", "${var.source_ami_owner_govcloud}"]
  region      = "${var.aws_region}"
}

locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

locals {
  ami_description = "EKS Kubernetes Worker AMI on Windows 2019 Core image (k8s: ${var.eks_version})"
  target_ami_name = "amazon-eks-node-${var.eks_version}-windows1809core-${local.timestamp}"
}

source "amazon-ebs" "autogenerated_1" {
  ami_description         = "${local.ami_description}"
  ami_name                = "${local.target_ami_name}"
  ami_virtualization_type = "hvm"
  communicator            = "winrm"
  instance_type           = "m5.large"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp2"
  }
  region = "${var.aws_region}"
  run_tags = {
    Name = "packer-${local.target_ami_name}"
  }
  source_ami = "${data.amazon-ami.autogenerated_1.id}"
  subnet_id  = "${var.subnet_id}"
  tags = {
    BuildDate = "${timestamp()}"
    Name      = "${local.target_ami_name}"
  }
  user_data_file = "./scripts/windows/UserData.ps1"
  winrm_insecure = true
  winrm_use_ssl  = true
  winrm_username = "Administrator"
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "powershell" {
    elevated_password = "${build.Password}"
    elevated_user     = "Administrator"
    scripts           = ["./scripts/windows/DisableUAC.ps1", "./scripts/windows/UpdateWindows.ps1", "./scripts/windows/UpdateDocker.ps1"]
  }

  provisioner "windows-restart" {
    restart_check_command = "powershell -command \"& {Write-Output 'restarted.'}\""
  }

  provisioner "powershell" {
    elevated_password = "${build.Password}"
    elevated_user     = "Administrator"
    scripts           = ["./scripts/windows/Cleanup.ps1"]
  }

}
