
variable "aws_region" {
  type    = string
  default = "us-east-2"
}

variable "data_volume_size" {
  type    = string
  default = "50"
}

variable "eks_version" {
  type    = string
  default = "1.18"
}

variable "hardening_flag" {
  type    = string
  default = false

  validation {
    condition     = can(contains([false, "cis"], var.hardening_flag))
    error_message = "Hardening flag must be either cis or false."
  }
}

variable "http_proxy" {
  type    = string
  default = ""
}

variable "https_proxy" {
  type    = string
  default = ""
}

variable "no_proxy" {
  type    = string
  default = ""
}

variable "root_volume_size" {
  type    = string
  default = "10"
}

variable "source_ami_arch" {
  type    = string
  default = "arm64"
}

variable "source_ami_owner" {
  type    = string
  default = "602401143452"
}

variable "source_ami_owner_govcloud" {
  type    = string
  default = "219670896067"
}

variable "source_ami_ssh_user" {
  type    = string
  default = "ec2-user"
}

variable "subnet_id" {
  type    = string
  default = ""
}

variable "vpc_id" {
  type    = string
  default = ""
}

data "amazon-ami" "autogenerated_1" {
  filters = {
    architecture        = "${var.source_ami_arch}"
    name                = "amazon-eks-arm64-node-${var.eks_version}-*"
    root-device-type    = "ebs"
    state               = "available"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["${var.source_ami_owner}", "${var.source_ami_owner_govcloud}"]
  region      = "${var.aws_region}"
}

locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

locals {
  ami_description = "EKS Kubernetes Worker AMI on AmazonLinux2 image (k8s: ${var.eks_version})"
  target_ami_name = "amazon-eks-arm64-node-${var.eks_version}-al2-${local.timestamp}"
}

source "amazon-ebs" "autogenerated_1" {
  ami_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sdb"
    volume_size           = "${var.data_volume_size}"
    volume_type           = "gp2"
  }
  ami_description         = "${local.ami_description}"
  ami_name                = "${local.target_ami_name}"
  ami_virtualization_type = "hvm"
  instance_type           = "m6g.xlarge"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp2"
  }
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sdb"
    volume_size           = "${var.data_volume_size}"
    volume_type           = "gp2"
  }
  region = "${var.aws_region}"
  run_tags = {
    Name = "packer-${local.target_ami_name}"
  }
  source_ami   = "${data.amazon-ami.autogenerated_1.id}"
  ssh_pty      = true
  ssh_username = "${var.source_ami_ssh_user}"
  subnet_id    = "${var.subnet_id}"
  tags = {
    BuildDate = "${timestamp()}"
    Name      = "${local.target_ami_name}"
  }
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "shell" {
    execute_command = "echo 'packer' | {{ .Vars }} sudo -S -E bash -eux '{{ .Path }}'"
    inline          = ["mkdir -p /etc/packer/files", "chown -R ${var.source_ami_ssh_user}:${var.source_ami_ssh_user} /etc/packer/files"]
  }

  provisioner "file" {
    destination = "/etc/packer/files"
    source      = "./files/"
  }

  provisioner "shell" {
    environment_vars  = ["HTTP_PROXY=${var.http_proxy}", "HTTPS_PROXY=${var.https_proxy}", "NO_PROXY=${var.no_proxy}"]
    execute_command   = "echo 'packer' | {{ .Vars }} sudo -S -E bash -eux '{{ .Path }}'"
    expect_disconnect = true
    pause_after       = "15s"
    script            = "./scripts/al2/boilerplate.sh"
  }

  provisioner "shell" {
    environment_vars = ["HTTP_PROXY=${var.http_proxy}", "HTTPS_PROXY=${var.https_proxy}", "NO_PROXY=${var.no_proxy}"]
    execute_command  = "echo 'packer' | {{ .Vars }} sudo -S -E bash -eux '{{ .Path }}'"
    scripts          = ["./scripts/al2/cis-benchmark.sh", "./scripts/shared/cis-docker.sh", "./scripts/shared/cis-eks.sh", "./scripts/al2/cleanup.sh"]
  }

}
