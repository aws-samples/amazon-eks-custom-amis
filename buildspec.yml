version: 0.2

phases:
  pre_build:
    commands:
      - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      - sudo apt-get update && sudo apt-get -y install packer
      - aws --version
  build:
    commands:
      - make VPC_ID=$VPC_ID SUBNET_ID=$SUBNET_ID EKS_VERSION=$EKS_VERSION $TARGET_NAME | tee build.log
  post_build:
    commands:
      - 'if [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ]; then exit 1; fi'
      - 'NG_ROLE=arn:aws:iam::878698112157:role/AmazonEKSNodeRole'
      - 'CLUSTER_NAME=$(echo "hardening-$EKS_VERSION" | tr -d ''.'')'
      - 'NAME=$(tail -n 30 build.log | grep Name | cut -d: -f4 | tr -d ''" '')' 
      - 'AMI=$(tail -n 10 build.log | grep ami | cut -d: -f2 | tr -d '' '')'
      - 'NG_NAME=$(echo $NAME | tr -d ''.'')'
      - 'USER_DATA=$(echo "#!/bin/bash\n/etc/eks/bootstrap.sh ${CLUSTER_NAME} --kubelet-extra-args ''--node-labels=eks.amazonaws.com/nodegroup=${NG_NAME},eks.amazonaws.com/nodegroup-image=${AMI}''" | base64 -w 0)'
      - 'echo "Value found: $NAME, $AMI, $TARGET_NAME, $EKS_VERSION, $NG_ROLE, $CLUSTER_NAME, $USER_DATA"'
      - 'echo aws ec2 create-launch-template --launch-template-name $NAME --version-description $TARGET_NAME-$EKS_VERSION --launch-template-data "{\"ImageId\": \"$AMI\", \"UserData\": \"$USER_DATA\"}"'
      - 'LT=$(aws ec2 create-launch-template --launch-template-name $NAME --version-description $TARGET_NAME-$EKS_VERSION --launch-template-data "{\"ImageId\": \"$AMI\", \"UserData\": \"$USER_DATA\"}")'
      - 'LT_VERSION=1'
      - 'echo "$NAME, $TARGET_NAME, date +%Y-%m-%d, $EKS_VERSION, PASSED" > artifacts.json'
      - 'NG=$(aws eks create-nodegroup --cluster-name $CLUSTER_NAME --subnets $SUBNET_ID --launch-template name=$NAME,version=$LT_VERSION --nodegroup-name $NG_NAME --node-role $NG_ROLE --scaling-config minSize=0,maxSize=1,desiredSize=1)'
      - 'STATUS=CREATING; while [ "$STATUS" = "CREATING" ]; do sleep 20; STATUS=$(aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NG_NAME | jq -r .nodegroup.status); echo $STATUS; done'
      - 'aws eks update-nodegroup-config --cluster-name $CLUSTER_NAME --nodegroup-name $NG_NAME --scaling-config minSize=0,maxSize=1,desiredSize=0'
      - 'if [ "$STATUS" != "ACTIVE" ]; then exit 1; fi'
artifacts:
  files:
    - artifacts.json
  name: eks-${TARGET_NAME}-${EKS_VERSION}-$(date +%Y-%m-%d)